1
00:00:00,200 --> 00:00:03,320
This video is a short introduction to containerization with Docker.

2
00:00:03,320 --> 00:00:06,280
.
A container includes an application

3
00:00:06,480 --> 00:00:09,840
and its dependencies.
Like a real world shipping container,

4
00:00:10,040 --> 00:00:13,160
think of containers as
easy to ship and handle.

5
00:00:13,360 --> 00:00:17,600
Docker is a particular containerization
technology. Inside a container you include

6
00:00:17,760 --> 00:00:21,760
the code of your application and all runtime
libraries for the dependencies, in addition

7
00:00:21,960 --> 00:00:25,200
to the system tools
and the configuration files.

8
00:00:25,520 --> 00:00:26,960
The result is that the containerized

9
00:00:27,160 --> 00:00:32,200
application will run identically
on any host without any incompatibility.

10
00:00:32,920 --> 00:00:36,320
Traditionally, an operating system like
Ubuntu has a package manager that installs apps,

11
00:00:36,520 --> 00:00:40,240
and the runtime
libraries shared among apps.

12
00:00:40,440 --> 00:00:44,920
Therefore, applications are coupled, because
they have to share the same dependencies.

13
00:00:45,120 --> 00:00:50,920
Using containerization, each application comes with its
libraries. Each application is isolated.

14
00:00:51,120 --> 00:00:54,560
Now you can update each
application independently.

15
00:00:54,800 --> 00:00:56,520
Containerization is different than using

16
00:00:56,720 --> 00:00:59,160
virtual machines. In a
virtual machine deployment,

17
00:00:59,360 --> 00:01:03,200
you have a host system that runs
a hypervisor like VMware.

18
00:01:03,400 --> 00:01:08,080
The hypervisor divides the physical
hardware resources among the virtual machines.

19
00:01:08,280 --> 00:01:11,720
Each virtual machine runs
its own operating system.

20
00:01:11,920 --> 00:01:15,720
The disadvantage of this is that there is
considerable override and processes cannot

21
00:01:15,920 --> 00:01:18,560
communicate over different
virtual machines.

22
00:01:18,760 --> 00:01:22,880
Instead, containerization has minimal overhead
and it allows us to deploy multiple

23
00:01:23,080 --> 00:01:27,040
applications so that they can
communicate with each other.

24
00:01:27,360 --> 00:01:31,000
It's now common to deploy Web applications
using stacks of containers,

25
00:01:31,200 --> 00:01:34,280
for example, you can deploy your blog
using a stack that contains

26
00:01:34,480 --> 00:01:39,440
your own instance of a database and
your own instance of a Web server.

27
00:01:40,080 --> 00:01:43,080
I want to give you
an overview of the Docker workflow.

28
00:01:43,280 --> 00:01:44,600
There are two main commands,

29
00:01:44,800 --> 00:01:49,680
"docker build" and "docker run". "Docker build"
builds an image from a Dockerfile.

30
00:01:49,880 --> 00:01:53,760
Docker run creates a container
from the image and runs it.

31
00:01:53,960 --> 00:01:57,000
In the following slides,
I will explain all of these terms.

32
00:01:57,200 --> 00:02:00,480
You would run "docker build" in a directory
that contains the application code

33
00:02:00,680 --> 00:02:05,000
and the Dockerfile. The Dockerfile
is the recipe for building the image.

34
00:02:05,200 --> 00:02:08,320
An image is an archive with the packaged application.

35
00:02:08,520 --> 00:02:13,160
Given an image, using "docker run",
we can produce many running containers.

36
00:02:13,360 --> 00:02:15,160
I want to show you a minimal example.

37
00:02:15,360 --> 00:02:19,480
You might have a directory
with a Python script called Hello.py.

38
00:02:19,680 --> 00:02:24,320
This is a simple Dockerfile that creates
an image that packages the script.

39
00:02:24,520 --> 00:02:27,400
In another video, we will see the meaning
of all commmands.

40
00:02:27,600 --> 00:02:31,000
For now, notice that there this is a comment
"FROM" that specifies the base image.

41
00:02:31,200 --> 00:02:34,320
The command "RUN" is used to call
the package manager and install

42
00:02:34,520 --> 00:02:38,160
the dependencies. You can pin
the exact dependencies that you need.

43
00:02:38,360 --> 00:02:40,040
The command "COPY" copies the script

44
00:02:40,240 --> 00:02:44,880
inside the image. "CMD" makes
it the default executable.

45
00:02:45,080 --> 00:02:46,960
Docket has a rich ecosystem of tools

46
00:02:47,160 --> 00:02:51,360
for running and monitoring containers. Portainer is one such example.

47
00:02:51,560 --> 00:02:54,800
It's  an interface that tells you which containers are running on your system.

48
00:02:55,000 --> 00:02:56,720
Here we see what containers are running on a Duckiebot.

49
00:02:59,200 --> 00:03:01,280
A Docker registry is an online service

50
00:03:01,480 --> 00:03:04,560
that contains a database of Docker
images that anybody can use.

51
00:03:04,760 --> 00:03:07,760
It's also possible to run
your own registry.

52
00:03:08,160 --> 00:03:09,760
You can think of a Docker registry as

53
00:03:09,960 --> 00:03:14,520
an app store that contains applications
you can install on your computer.

54
00:03:15,280 --> 00:03:18,720
The largest registry is Dockerhub,
which we are going to use.

55
00:03:18,920 --> 00:03:22,920
Often we will tell you to use a specific
image published on the Duckietown account.

56
00:03:23,120 --> 00:03:27,160
If you're curious, you can go
and browse all available images.

57
00:03:27,360 --> 00:03:30,520
I will show you how we can
share images using registries.

58
00:03:30,720 --> 00:03:35,280
There are two different workflows, one
for the developer and one for the user.

59
00:03:35,480 --> 00:03:39,520
A developer uses the command "docker build"
to build an image on their computer.

60
00:03:39,720 --> 00:03:43,600
The command "Docker push"
uploads a copy to registry.

61
00:03:43,800 --> 00:03:46,040
The user runs the comment "docker pulll"

62
00:03:46,240 --> 00:03:50,440
to copy an image on their computer,
then "docker run" creates running

63
00:03:50,640 --> 00:03:52,800
containers from the image.

64
00:03:53,520 --> 00:03:56,720
Docker made developers life much easier.

65
00:03:56,920 --> 00:04:00,280
Dockerfiles are a way to make builds
producible and documented.

66
00:04:00,480 --> 00:04:03,960
With Docker, you have complete control
of your execution environment and you will

67
00:04:04,160 --> 00:04:08,960
not have any incompatibility. Yet,
applications can communicate.

68
00:04:10,320 --> 00:04:13,360
Finally, you have complete
control of the resource usage.

69
00:04:13,560 --> 00:04:17,520
There are ways to limit the CPU
and RAM that a  container can use.

70
00:04:17,720 --> 00:04:21,960
It's also possible to limit network
utilization, which increases security.

