1
00:00:00,200 --> 00:00:03,280
Questo video è una breve introduzione
alla containerizzazione con Docker.

2
00:00:03,480 --> 00:00:06,280
. Un container include un'applicazione

3
00:00:06,480 --> 00:00:09,840
e le sue dipendenze. Come un vero e
proprio container per spedizioni,

4
00:00:10,040 --> 00:00:13,160
pensate ai container come qualcosa
facile da spedire e maneggiare.

5
00:00:13,360 --> 00:00:14,840
Docker è una particolare tecnologia di

6
00:00:14,840 --> 00:00:17,600
containerizzazione.
All'interno di un container si include

7
00:00:17,760 --> 00:00:19,360
il codice dell'applicazione e

8
00:00:19,360 --> 00:00:21,760
tutte le librerie di runtime
per le dipendenze, inoltre

9
00:00:21,960 --> 00:00:25,320
agli strumenti di sistema e
ai file di configurazione.

10
00:00:25,520 --> 00:00:26,960
Il risultato è che l'applicazione nel container

11
00:00:27,160 --> 00:00:29,160
verrà eseguita in modo

12
00:00:29,360 --> 00:00:32,720
identico su qualsiasi host
senza alcuna incompatibilità.

13
00:00:32,920 --> 00:00:34,120
Tradizionalmente, un sistema operativo

14
00:00:34,120 --> 00:00:36,320
come Ubuntu ha un gestore di pacchetti
che installa le applicazioni,

15
00:00:36,520 --> 00:00:40,240
e le librerie di runtime librerie
condivise tra le applicazioni.

16
00:00:40,440 --> 00:00:42,480
Pertanto, le applicazioni sono accoppiate,

17
00:00:42,620 --> 00:00:44,920
perché devono condividere
le stesse dipendenze.

18
00:00:45,120 --> 00:00:46,920
Usando la containerizzazione, ogni

19
00:00:47,060 --> 00:00:49,360
applicazione usa le sue librerie.

20
00:00:49,520 --> 00:00:50,920
Ogni applicazione è isolata.

21
00:00:51,120 --> 00:00:54,600
Ora è possibile aggiornare ogni
applicazione in modo indipendente.

22
00:00:54,800 --> 00:00:56,520
La containerizzazione
è diversa dall'uso di

23
00:00:56,720 --> 00:00:59,160
virtual machines. Usando le virtual machines,

24
00:00:59,360 --> 00:01:03,200
c'è un sistema host che esegue
un hypervisor come VMware.

25
00:01:03,400 --> 00:01:05,440
L'hypervisor divide le risorse hardware

26
00:01:05,640 --> 00:01:08,080
fisiche
tra le macchine virtuali.

27
00:01:08,280 --> 00:01:11,720
Ogni macchina virtuale esegue
il proprio sistema operativo.

28
00:01:11,920 --> 00:01:13,480
Lo svantaggio di questo è che c'è una

29
00:01:13,480 --> 00:01:15,720
considerevole inefficienza
e i processi non possono

30
00:01:15,920 --> 00:01:18,560
comunicare tra virtual machines diverse.

31
00:01:18,760 --> 00:01:20,480
Invece, la containerizzazione ha un

32
00:01:20,530 --> 00:01:22,880
overhead minimo e ci
permette di distribuire più

33
00:01:23,080 --> 00:01:27,160
applicazioni in modo che
possano comunicare tra loro.

34
00:01:27,360 --> 00:01:31,000
Ora è comune distribuire applicazioni
web usando stack di container,

35
00:01:31,200 --> 00:01:34,280
per esempio, puoi far girare il tuo
blog usando uno stack che contiene

36
00:01:34,480 --> 00:01:39,880
la tua istanza di un database e
la tua istanza di un server web.

37
00:01:40,080 --> 00:01:43,080
Voglio darvi una panoramica del
flusso di lavoro di Docker.

38
00:01:43,280 --> 00:01:44,600
Ci sono due comandi principali,

39
00:01:44,800 --> 00:01:46,480
"docker build" e "docker run".

40
00:01:46,680 --> 00:01:49,680
"docker build" costruisce
un'immagine da un Dockerfile.

41
00:01:49,880 --> 00:01:53,760
"docker run" crea un contenitore
dall'immagine e lo esegue.

42
00:01:53,960 --> 00:01:57,000
Nelle slides seguenti,
spiegherò tutti questi termini.

43
00:01:57,200 --> 00:01:58,680
Si dovrebbe eseguire "docker build" in una

44
00:01:58,680 --> 00:02:00,480
directory che contiene il
codice dell'applicazione

45
00:02:00,680 --> 00:02:01,640
e il Dockerfile.

46
00:02:01,840 --> 00:02:05,000
Il Dockerfile è la ricetta
per costruire l'immagine.

47
00:02:05,200 --> 00:02:08,320
Un'immagine è un archivio con
l'applicazione impacchettata.

48
00:02:08,520 --> 00:02:10,480
Data un'immagine, usando "docker run",

49
00:02:10,680 --> 00:02:13,160
possiamo produrre molti
container da far girare.

50
00:02:13,360 --> 00:02:15,160
Voglio mostrarvi un esempio minimo.

51
00:02:15,360 --> 00:02:19,240
Potreste avere una directory con
uno script Python chiamato Hello.py.

52
00:02:19,680 --> 00:02:24,320
Questo è un semplice Dockerfile che crea
un'immagine che impacchetta lo script.

53
00:02:24,520 --> 00:02:27,400
In un altro video, vedremo il
significato di tutti i comandi.

54
00:02:27,600 --> 00:02:31,000
Per ora, notate che c'è un comando "FROM" che specifica l'immagine di base.

55
00:02:31,200 --> 00:02:34,320
Il comando "RUN" è usato per chiamare
il gestore di pacchetti e installare

56
00:02:34,520 --> 00:02:35,120
le dipendenze.

57
00:02:35,160 --> 00:02:38,160
È possibile ancorare le dipendenze
esatte di cui avete bisogno.

58
00:02:38,360 --> 00:02:40,040
Il comando "COPY" copia lo script

59
00:02:40,240 --> 00:02:42,040
all'interno dell'immagine.

60
00:02:42,240 --> 00:02:44,880
"CMD" rende l'eseguibile predefinito.

61
00:02:45,080 --> 00:02:46,960
Docket ha un ricco ecosistema di strumenti

62
00:02:47,160 --> 00:02:49,360
per eseguire e monitorare i container.

63
00:02:49,560 --> 00:02:51,360
Portainer è uno di questi esempi.

64
00:02:51,560 --> 00:02:52,960
È un'interfaccia che ti dice quali

65
00:02:52,960 --> 00:02:54,800
container sono in
esecuzione sul tuo sistema.

66
00:02:55,000 --> 00:02:58,360
Qui vediamo quali contenitori sono
in esecuzione su un Duckiebot.

67
00:02:59,200 --> 00:03:01,280
Un registro Docker è un servizio online

68
00:03:01,480 --> 00:03:04,560
che contiene un database di immagini
Docker che chiunque può utilizzare.

69
00:03:04,760 --> 00:03:07,960
È anche possibile eseguire
il proprio registro.

70
00:03:08,160 --> 00:03:09,760
Si può pensare a un registro Docker come

71
00:03:09,960 --> 00:03:15,080
un app store che contiene applicazioni
che puoi installare sul tuo computer.

72
00:03:15,280 --> 00:03:18,720
Il più grande registro è
Dockerhub, che useremo.

73
00:03:18,920 --> 00:03:20,720
Spesso ti diremo di usare una specifica

74
00:03:20,720 --> 00:03:22,920
immagine pubblicata
sull'account di Duckietown.

75
00:03:23,120 --> 00:03:27,160
Se siete curiosi, potete andare e
sfogliare tutte le immagini disponibili.

76
00:03:27,360 --> 00:03:30,520
Vi mostrerò come possiamo condividere
immagini usando i registri.

77
00:03:30,720 --> 00:03:35,280
Ci sono due diversi flussi di lavoro, uno
per lo sviluppatore e uno per l'utente.

78
00:03:35,480 --> 00:03:37,160
Uno sviluppatore usa il comando "docker

79
00:03:37,160 --> 00:03:39,520
build" per costruire un'immagine
sul proprio computer.

80
00:03:39,720 --> 00:03:43,600
Il comando "Docker push"
carica una copia nel registro.

81
00:03:43,800 --> 00:03:46,040
L'utente esegue il commento "docker pulll"

82
00:03:46,240 --> 00:03:50,440
per copiare un'immagine sul suo computer,
poi "docker run" crea il container da far girare.

83
00:03:50,640 --> 00:03:53,320


84
00:03:53,520 --> 00:03:56,720
Docker ha reso la vita degli
sviluppatori molto più facile.

85
00:03:56,920 --> 00:04:00,280
I Dockerfile sono un modo per rendere
le build producibili e documentate.

86
00:04:00,480 --> 00:04:02,120
Con Docker, avete il controllo completo

87
00:04:02,120 --> 00:04:03,960
del vostro ambiente di
esecuzione e non

88
00:04:04,160 --> 00:04:06,160
troverete alcuna incompatibilità.

89
00:04:06,360 --> 00:04:10,120
Eppure, le applicazioni
possono comunicare.

90
00:04:10,320 --> 00:04:13,360
Infine, avete il completo
controllo dell'uso delle risorse.

91
00:04:13,560 --> 00:04:17,520
Ci sono modi per limitare la CPU e la
RAM che un container può utilizzare.

92
00:04:17,720 --> 00:04:19,480
È anche possibile limitare l'utilizzo

93
00:04:19,480 --> 00:04:21,920
della rete, il
che aumenta la sicurezza.

