1
00:00:00,200 --> 00:00:03,160
这段视频是对Docker容器化的简短介绍。

2
00:00:03,360 --> 00:00:06,280
. 一个容器包括一个应用程序

3
00:00:06,480 --> 00:00:09,840
及其依赖性。 就像现实世界中的集装箱。

4
00:00:10,040 --> 00:00:13,160
把集装箱看成 易于运输和处理。

5
00:00:13,360 --> 00:00:17,600
Docker是一种特殊的容器化 技术。在一个容器内，你包括

6
00:00:17,800 --> 00:00:21,760
应用程序的代码和所有运行时的 库的依赖关系，此外还有

7
00:00:21,960 --> 00:00:25,320
到系统工具 和配置文件。

8
00:00:25,520 --> 00:00:26,960
其结果是，容器化的

9
00:00:27,160 --> 00:00:32,720
应用程序将以同样的方式运行 在任何主机上都不会出现不兼容的情况。

10
00:00:32,920 --> 00:00:36,320
传统上，一个操作系统，如 Ubuntu有一个安装应用程序的软件包管理器。

11
00:00:36,520 --> 00:00:40,240
和运行时间 应用程序之间共享的库。

12
00:00:40,440 --> 00:00:44,920
因此，应用是耦合的，因为 它们必须共享相同的依赖关系。

13
00:00:45,120 --> 00:00:50,920
使用容器化，每个应用程序都有它的 库。每个应用程序都是孤立的。

14
00:00:51,120 --> 00:00:54,600
现在您可以更新每个 独立申请。

15
00:00:54,800 --> 00:00:56,520
容器化与使用

16
00:00:56,720 --> 00:00:59,160
虚拟机。在一个 虚拟机部署。

17
00:00:59,360 --> 00:01:03,200
你有一个主机系统，运行 像VMware这样的管理程序。

18
00:01:03,400 --> 00:01:08,080
管理程序将物理的 虚拟机之间的硬件资源。

19
00:01:08,280 --> 00:01:11,720
每个虚拟机运行 自己的操作系统。

20
00:01:11,920 --> 00:01:15,720
这样做的缺点是，有 相当大的覆盖率，而且流程不能

21
00:01:15,920 --> 00:01:18,560
异地通信 虚拟机。

22
00:01:18,760 --> 00:01:22,880
相反，容器化的开销很小 而且它允许我们部署多个

23
00:01:23,080 --> 00:01:27,160
应用，以便他们能够 互相沟通。

24
00:01:27,360 --> 00:01:31,000
现在，部署Web应用程序已经很普遍了 使用堆叠的容器。

25
00:01:31,200 --> 00:01:34,280
例如，你可以部署你的博客 使用包含

26
00:01:34,480 --> 00:01:39,880
你自己的数据库实例和 你自己的Web服务器实例。

27
00:01:40,080 --> 00:01:43,080
我想给你 Docker工作流程的概述。

28
00:01:43,280 --> 00:01:44,600
有两个主要命令。

29
00:01:44,800 --> 00:01:49,680
"docker build "和 "docker run"。"
Docker build" 从Docker文件中构建一个镜像。

30
00:01:49,880 --> 00:01:53,760
Docker运行创建一个容器 从图像中提取并运行它。

31
00:01:53,960 --> 00:01:57,000
在以下幻灯片中： 我将解释所有这些术语。

32
00:01:57,200 --> 00:02:00,480
你可以在一个目录下运行 "docker build"。 包含应用程序代码

33
00:02:00,680 --> 00:02:05,000
和Dockerfile。Docker文件 是建立形象的秘诀。

34
00:02:05,200 --> 00:02:08,320
镜像是带有打包的应用程序的存档。

35
00:02:08,520 --> 00:02:13,160
给定一个图像，使用 "docker run"。 我们可以生产许多运行的容器。

36
00:02:13,360 --> 00:02:15,160
我想给你看一个最小的例子。

37
00:02:15,360 --> 00:02:19,480
你可能有一个目录 用一个名为Hello.py的Python脚本。

38
00:02:19,680 --> 00:02:24,320
这是一个简单的Docker文件，它可以创建出 脚本打包的图像。

39
00:02:24,520 --> 00:02:27,400
在另一个视频中，我们将看到的意义 的所有命令。

40
00:02:27,600 --> 00:02:31,000
现在，请注意，有这是一个评论 "FROM"，指定基础图像。

41
00:02:31,200 --> 00:02:34,320
命令 "RUN "用于调用 包管理器并安装

42
00:02:34,520 --> 00:02:38,160
的依赖关系。您可以将 您所需要的确切的依赖关系。

43
00:02:38,360 --> 00:02:40,040
命令 "COPY "可以复制脚本

44
00:02:40,240 --> 00:02:44,880
内的图像。"CMD "使 它是默认的可执行文件。

45
00:02:45,080 --> 00:02:46,960
Docket拥有丰富的工具生态系统

46
00:02:47,160 --> 00:02:51,360
用于运行和监控容器。Portainer就是这样一个例子。

47
00:02:51,560 --> 00:02:54,800
它是一个界面，可以告诉你系统上正在运行哪些容器。

48
00:02:55,000 --> 00:02:58,280
在这里，我们看到Duckiebot上运行着哪些容器。

49
00:02:59,200 --> 00:03:01,280
Docker注册表是一个在线服务。

50
00:03:01,480 --> 00:03:04,560
的数据库，其中包含一个Docker 任何人都可以使用的图像。

51
00:03:04,760 --> 00:03:07,960
也可以运行 你自己的注册表。

52
00:03:08,160 --> 00:03:09,760
你可以把Docker注册表看成是这样的

53
00:03:09,960 --> 00:03:15,080
应用商店 你可以在你的电脑上安装。

54
00:03:15,280 --> 00:03:18,720
最大的注册送体验金官网是Dockerhub。 我们要使用的。

55
00:03:18,920 --> 00:03:22,920
通常我们会告诉你使用特定的 图片发表在鸭子镇账号上。

56
00:03:23,120 --> 00:03:27,160
如果你好奇，你可以去。 并浏览所有可用的图片。

57
00:03:27,360 --> 00:03:30,520
我会告诉你我们如何 使用注册表共享图像。

58
00:03:30,720 --> 00:03:35,280
有两种不同的工作流程，一种是 开发者的，用户的。

59
00:03:35,480 --> 00:03:39,520
开发者使用 "docker build "命令。 以在他们的电脑上建立一个形象。

60
00:03:39,720 --> 00:03:43,600
命令 "Docker push" 上载一份副本到注册表。

61
00:03:43,800 --> 00:03:46,040
用户运行注释 "docker pulll"

62
00:03:46,240 --> 00:03:50,440
在他们的电脑上复制图像。 然后 "docker run "创建运行的

63
00:03:50,640 --> 00:03:53,320
容器从图像。

64
00:03:53,520 --> 00:03:56,720
Docker让开发者的生活变得更加轻松。

65
00:03:56,920 --> 00:04:00,280
Dockerfiles是制作构建的一种方式。 可生产和记录的。

66
00:04:00,480 --> 00:04:03,960
有了Docker，你可以完全控制 您的执行环境，您将

67
00:04:04,160 --> 00:04:10,120
不存在任何不相容性。然而，。 应用程序可以进行通信。

68
00:04:10,320 --> 00:04:13,360
最后，你有完整的 控制资源的使用。

69
00:04:13,560 --> 00:04:17,520
有一些方法可以限制CPU 和一个容器可以使用的RAM。

70
00:04:17,720 --> 00:04:21,760
也可以限制网络 利用，从而提高了安全性。

