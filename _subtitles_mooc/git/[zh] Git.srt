1
00:00:01,120 --> 00:00:05,920
这个短视频是对git版本控制的介绍。

2
00:00:06,120 --> 00:00:08,400
为什么我们需要使用版本控制？

3
00:00:08,600 --> 00:00:10,800
其中一个原因是合作：它允许你

4
00:00:11,000 --> 00:00:14,000
与许多人在同一个项目上工作。

5
00:00:14,200 --> 00:00:16,800
有了版本控制，你可以在平行的分支上工作。

6
00:00:17,000 --> 00:00:20,160
这意味着同时有不同版本的代码。

7
00:00:20,360 --> 00:00:25,480
版本控制也是正式开发过程中必不可少的一部分。

8
00:00:25,680 --> 00:00:28,760
看看版本控制的历史，很有意思。

9
00:00:28,960 --> 00:00:32,880
在60年代，你存储代码的方式就是打印出来。

10
00:00:33,080 --> 00:00:34,760
下一个是玛格丽特-汉密尔顿

11
00:00:34,960 --> 00:00:38,200
的源代码。 的阿波罗登月任务。

12
00:00:38,400 --> 00:00:40,000
在90年代，俄罗斯的主要工具。

13
00:00:40,200 --> 00:00:44,640
控制是CVS，其中每个文件 会有独立的历史。

14
00:00:44,840 --> 00:00:48,560
Subversion引入了客户端-服务器架构和快照的概念。

15
00:00:48,760 --> 00:00:52,400
的整个代码库，而不是单个文件。

16
00:00:52,600 --> 00:00:56,680
有了分布式版本控制系统，比如Git，就有了很大的改进。

17
00:00:56,880 --> 00:01:02,080
这是现在使用最多的系统，也是我们要使用的系统。

18
00:01:02,280 --> 00:01:04,120
在Git之上，还有一个庞大的生态系统

19
00:01:04,320 --> 00:01:09,160
的服务，如Github和Gitlab。这些服务提供的功能

20
00:01:09,360 --> 00:01:13,480
如问题跟踪和拉动请求，使协作变得简单。

21
00:01:13,680 --> 00:01:17,640
Git是由Linus Torvalds创建的，也就是发明Linux的芬兰人。

22
00:01:17,840 --> 00:01:22,280
正如他所说，就像Linux一样，Git也是以他的名字命名的。

23
00:01:22,480 --> 00:01:24,800
Git是为Linux开发而生的。

24
00:01:25,000 --> 00:01:28,560
对于这种规模的项目，没有其他的工具足以应付。

25
00:01:28,760 --> 00:01:31,680
你可以在Github上找到Linux内核的版本库。

26
00:01:31,880 --> 00:01:36,440
你会发现，它有几百万的 承诺和成千上万的贡献者。

27
00:01:36,640 --> 00:01:38,680
莱纳斯发明Git就是一个示范

28
00:01:38,880 --> 00:01:42,040
绝地武士的原则 构建自己的光剑。

29
00:01:42,240 --> 00:01:44,360
这个原理同样适用于机器人技术。

30
00:01:44,560 --> 00:01:46,800
作为一名机械手，我们会用到很多工具。

31
00:01:47,000 --> 00:01:49,080
但有可能，都不太够用。

32
00:01:49,280 --> 00:01:52,560
而你需要去延长 他们或建立自己的。

33
00:01:52,760 --> 00:01:56,760
说回Git。Git的核心是 提交图的概念。

34
00:01:56,960 --> 00:02:01,080
例如，以下是提交图 为鸭子镇的一个仓库。

35
00:02:01,280 --> 00:02:06,440
在Github上，你可以通过 "洞察力 "
来获取这些信息。 菜单，然后选择 "网络"。

36
00:02:06,640 --> 00:02:09,640
这是一个图，其中每个节点 表示源代码的一个状态。

37
00:02:09,840 --> 00:02:13,000
边缘的变化，带来的是 你从一个州到另一个州。

38
00:02:13,200 --> 00:02:14,440
这个图形不是线性的。

39
00:02:14,640 --> 00:02:17,520
可以有平行的分支 在其中发生发展。

40
00:02:17,720 --> 00:02:20,000
例如： 一人做事两人当

41
00:02:20,200 --> 00:02:22,600
在同一项目中，没有 互相干扰。

42
00:02:22,800 --> 00:02:25,280
那么，以后他们就可以合并工作了。

43
00:02:25,480 --> 00:02:27,320
这是另一个提交图的例子。

44
00:02:27,520 --> 00:02:30,520
在这个可视化的过程中，时间推移 从下到上。

45
00:02:30,720 --> 00:02:33,800
这是2016年鸭子镇项目的第一个库房。

46
00:02:34,000 --> 00:02:37,000
你可以看到，一开始只有少数人在做这个项目。

47
00:02:37,200 --> 00:02:39,000
后来，最终还有很多人加入。

48
00:02:39,200 --> 00:02:43,680
于是图形变得不那么线性了。
如果我们把顶部放大。

49
00:02:43,880 --> 00:02:47,320
你会看到 "主 "分支  这里面包含了项目的主副本，.NET的主副本。

50
00:02:47,520 --> 00:02:51,360
在这个意义上，最终所有的 分支将被合并到主站。

51
00:02:51,560 --> 00:02:54,640
如果我们放大来看，我们看到，在当时 该快照的拍摄。

52
00:02:54,840 --> 00:02:59,280
有很多分支，等待着被合并到主品牌中。

53
00:02:59,480 --> 00:03:01,360
Git非常灵活。

54
00:03:01,560 --> 00:03:04,440
它没有规定语义 为不同的分支。

55
00:03:04,640 --> 00:03:07,680
但也有一些约定，是 对组织发展非常有用。

56
00:03:07,880 --> 00:03:12,360
其中使用最多的是 "Git Flow" 模型，它规定了团队如何能

57
00:03:12,560 --> 00:03:17,160
协调发展 的不同版本并行。

58
00:03:17,360 --> 00:03:18,960
我们为您提供以下几点建议

59
00:03:19,160 --> 00:03:22,200
你可以使用的资源 来学习Git。

60
00:03:22,400 --> 00:03:25,680
在你的旅程中，你会意识到这是非常。 功能强大，而且它有很多功能。

61
00:03:25,880 --> 00:03:26,960
不要被吓到。

62
00:03:27,160 --> 00:03:31,080
请记住，您通常只 需要Git的基本功能。

63
00:03:31,280 --> 00:03:34,680
这是一个基本的总结。 你可能想学习的操作。

64
00:03:34,880 --> 00:03:36,640
你应该学会如何克隆一个仓库。

65
00:03:36,840 --> 00:03:40,920
如何提交修改，以及如何远程推送修改。

66
00:03:41,120 --> 00:03:44,760
分支和合并是非常 在某些时候是有用的，可以学习。

67
00:03:44,960 --> 00:03:46,680
最后，学习GitHub是非常有用的。

68
00:03:46,880 --> 00:03:49,240
诸如拉动等功能 请求和问题跟踪。

